{"mappings":"gfACA,IAAAA,EAAAC,EAAA,SAKMC,EAAOC,SAASC,cAAc,SAIhCC,EAAY,KACZC,EAAc,KAGc,SAAvBC,EAAcC,EAAUC,GAC/B,OAAO,IAAIC,SAAQ,SAACC,EAASC,GAC3BC,YAAW,WACaC,KAAKC,SAAW,GAEpCJ,EAAQ,CAAEH,WAAUC,UAEpBG,EAAO,CAAEJ,WAAUC,S,GAEpBA,E,IAkCPP,EAAKc,iBAAiB,UA7BA,SAAAC,GACpBA,EAAEC,iBAG0B,IAETC,EAAfF,EAAEG,cADJC,SAAYC,EAAKH,EAALV,MAAOc,EAAIJ,EAAJI,KAAMC,EAAML,EAANK,OAIcC,WAA5BC,OAAOJ,EAAMK,OAC1BtB,EAAYqB,OAAOH,EAAKI,OACxBrB,EAAcoB,OAAOF,EAAOG,OAEsB,IAA7C,IAAIC,EAAI,EAAGA,GAAKtB,EAAasB,GAAI,EACpCrB,EAAcqB,EAAGH,YACdI,MAAK,SAAAC,G,IAAGtB,EAAQsB,EAARtB,SAAUC,EAAKqB,EAALrB,MACjBT,EAAA+B,OAAOC,QAAQ,uBAAwCC,OAAfzB,EAAS,QAAYyB,OAANxB,EAAM,M,IAE9DyB,OAAM,SAAAJ,G,IAAGtB,EAAQsB,EAARtB,SAAUC,EAAKqB,EAALrB,MAClBT,EAAA+B,OAAOI,QAAQ,sBAAuCF,OAAfzB,EAAS,QAAYyB,OAANxB,EAAM,M,IAGhEgB,YAAcpB,EAGEY,EAAhBG,cAAcgB,O","sources":["src/js/03-promises.js"],"sourcesContent":["// імпорт елементу Notify з бібліотеки Notiflix\nimport { Notify } from 'notiflix';\n// Додатковий імпорт стилів\nimport \"notiflix/dist/notiflix-3.2.6.min.css\"\n\n// отрумуємо посилання на елемент DOM форми\nconst form = document.querySelector('.form');\n\n// оголошуємо змінні для запису значень введених в input\nlet ut = null;\nlet stepInput = null;\nlet amountInput = null;\n\n// функція, що створює та повертає проміс\nfunction createPromise(position, delay) {\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      const shouldResolve = Math.random() > 0.3;\n      if (shouldResolve) {\n        resolve({ position, delay });\n      } else {\n        reject({ position, delay });\n      }\n    }, delay);\n  });\n}\n\n// обробник при відправці форми\nconst submitHandler = e => {\n  e.preventDefault();\n  \n  // деструктуризуємо дані з інпутів\n  const {\n    elements: { delay, step, amount },\n  } = e.currentTarget;\n\n  // записуємо отримані дані до відповідних змінних\n  delayInput = Number(delay.value);\n  stepInput = Number(step.value);\n  amountInput = Number(amount.value);\n// цикл для  виклику функції createPromise стільки разів, скільки ввели в поле amount\n  for (let i = 1; i <= amountInput; i+= 1) {\n    createPromise(i, delayInput)\n      .then(({ position, delay }) => {\n        Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`);\n      })\n      .catch(({ position, delay }) => {\n        Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`);\n      });\n\n    delayInput += stepInput;\n  }\n// очищення форми після submit\n  e.currentTarget.reset();\n};\n\n// встановленя слухача для події submit\nform.addEventListener('submit', submitHandler);"],"names":["$6JpON","parcelRequire","$ce04d3a99e08e73b$var$form","document","querySelector","$ce04d3a99e08e73b$var$stepInput","$ce04d3a99e08e73b$var$amountInput","$ce04d3a99e08e73b$var$createPromise","position","delay","Promise","resolve","reject","setTimeout","Math","random","addEventListener","e","preventDefault","_elements","currentTarget","elements","delay1","step","amount","delayInput","Number","value","i","then","param","Notify","success","concat","catch","failure","reset"],"version":3,"file":"03-promises.56c1fd11.js.map"}